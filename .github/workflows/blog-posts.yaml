name: Latest blog posts from Hashnode

on:
  schedule:
    - cron: '0 * * * *'  # every hour
  workflow_dispatch:

jobs:
  update-readme:
    name: Update README with latest blog posts
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Add permission to write to repository contents

    steps:
      - uses: actions/checkout@v3
      
      - name: Install required dependencies
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils jq

      - name: Fetch and Format Latest Blog Posts
        run: |
          echo "Fetching blog posts..."
          
          # Get the RSS feed
          echo "Fetching from https://tanmaybansal.hashnode.dev/rss.xml"
          curl -s https://tanmaybansal.hashnode.dev/rss.xml > feed.xml
          
          # Process each item using more robust parsing
          echo "Processing RSS feed..."
          
          # Extract titles and links
          titles=$(xmllint --xpath "//item/title" feed.xml | sed -e 's/<title>//g' -e 's/<\/title>//g' -e 's/\!\[CDATA\[//g' -e 's/\]\]>//g')
          links=$(xmllint --xpath "//item/link/text()" feed.xml)
          
          # Create blog posts array (up to 5 posts)
          echo "Creating blog posts list..."
          blog_posts=""
          count=0
          while IFS= read -r title && IFS= read -r link <&3 && [ $count -lt 5 ]; do
            # Clean the title by removing CDATA wrapper
            clean_title=$(echo "$title" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            clean_title=${clean_title// /\\ }  # Escape spaces for markdown
            
            # Clean the link
            clean_link=$(echo "$link" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            
            # Add to blog posts
            blog_posts="${blog_posts}- [${clean_title}](${clean_link})\n"
            count=$((count+1))
          done <<< "$titles" 3<<< "$links"
          
          # If no posts were found, try a different approach with grep
          if [ -z "$blog_posts" ]; then
            echo "First approach failed. Trying with grep..."
            
            # Extract post information with grep
            items=$(grep -A 5 "<item>" feed.xml)
            titles=$(echo "$items" | grep -o "<title>.*</title>" | sed -e 's/<title><!\[CDATA\[ //' -e 's/ \]\]><\/title>//')
            links=$(echo "$items" | grep -o "<link>.*</link>" | sed -e 's/<link>//' -e 's/<\/link>//')
            
            # Build blog posts list from grep results
            blog_posts=""
            count=0
            while IFS= read -r title && IFS= read -r link <&3 && [ $count -lt 5 ]; do
              blog_posts="${blog_posts}- [${title}](${link})\n"
              count=$((count+1))
            done <<< "$titles" 3<<< "$links"
          fi
          
          # Final fallback if all parsing attempts fail
          if [ -z "$blog_posts" ]; then
            echo "Extracting with a more direct approach..."
            # Extract first 5 titles and links directly
            blog_posts=$(xmllint --html --xpath "//item[position()<=5]" feed.xml 2>/dev/null | \
              grep -o -e "<title>.*</title>" -e "<link>.*</link>" | \
              sed -e 's/<title><!\[CDATA\[ //' -e 's/ \]\]><\/title>//' -e 's/<link>//' -e 's/<\/link>//' | \
              awk 'NR%2{title=$0;next}{print "- [" title "](" $0 ")"}')
          fi
          
          # If still no posts, add placeholder
          if [ -z "$blog_posts" ]; then
            echo "No blog posts found, adding placeholder"
            blog_posts="- No blog posts found. Check back later!"
          fi
          
          echo -e "Latest posts:\n$blog_posts"
          
          # Escape slashes for sed
          blog_posts_escaped=$(echo -e "$blog_posts" | sed 's_/_\\/_g')

          # Update README.md in place
          sed -i "/<!-- BLOG-POST-LIST:START -->/,/<!-- BLOG-POST-LIST:END -->/c\\
          <!-- BLOG-POST-LIST:START -->\n$blog_posts_escaped\n<!-- BLOG-POST-LIST:END -->" README.md

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git diff --quiet || (git add README.md && git commit -m "Update latest blog posts" && git push)
