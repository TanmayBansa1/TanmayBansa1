name: Latest blog posts from Medium
"on":
  schedule:
    - cron: 0 * * * *
  workflow_dispatch: null
jobs:
  update-readme:
    name: Update README with latest blog posts
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Create blog posts file
        env:
          RAPIDAPI_KEY: "${{ secrets.RAPIDAPI_KEY }}"
          MEDIUM_USER_ID: "${{ secrets.MEDIUM_USER_ID }} || cb42ec9bafd3"
        run: |
          echo "Fetching blog posts using Medium2 RapidAPI..."

          # Create a Node.js script to fetch Medium articles
          cat > fetch-posts.js << 'EOFSCRIPT'
          const https = require('https');
          const fs = require('fs');

          const RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;
          const MEDIUM_USER_ID = process.env.MEDIUM_USER_ID;

          if (!RAPIDAPI_KEY || !MEDIUM_USER_ID) {
            console.error('Missing RAPIDAPI_KEY or MEDIUM_USER_ID env vars');
            process.exit(1);
          }

          function request(path) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'medium2.p.rapidapi.com',
                path,
                method: 'GET',
                headers: {
                  'x-rapidapi-key': RAPIDAPI_KEY,
                  'x-rapidapi-host': 'medium2.p.rapidapi.com'
                }
              };

              const req = https.request(options, (res) => {
                const chunks = [];
                res.on('data', (c) => chunks.push(c));
                res.on('end', () => {
                  if (res.statusCode !== 200) {
                    return reject(new Error(`HTTP ${res.statusCode}: ${Buffer.concat(chunks).toString('utf-8')}`));
                  }
                  resolve(JSON.parse(Buffer.concat(chunks).toString('utf-8')));
                });
              });

              req.on('error', reject);
              req.end();
            });
          }

          async function main() {
            try {
              // 1) Get top articles by user -> article IDs
              const topArticles = await request(`/user/${MEDIUM_USER_ID}/top_articles`);
              const ids = (topArticles?.top_articles)
                .map((it) => it?.id || it)
                .filter(Boolean);

              if (ids.length === 0) {
                console.log('No top articles found');
                fs.writeFileSync('blog-posts.txt', '- No blog posts found. Check back later!');
                return;
              }

              // 2) For each ID, fetch details
              const details = [];
              for (const id of ids) {
                try {
                  const article = await request(`/article/${id}`);
                  details.push(article);
                } catch (e) {
                  console.warn(`Failed fetching article ${id}: ${e.message}`);
                }
              }

              // 3) Format for README
              const items = details
                .map((a) => {
                  const title = a?.title || a?.data?.title || 'Untitled';
                  const url = a?.link || a?.url || (a?.data && a.data.link) || `https://medium.com/p/${a?.id || ''}`;
                  return `- [${title}](${url})`;
                })
                .join('\n');

              fs.writeFileSync('blog-posts.txt', items);
              console.log('Blog posts written to blog-posts.txt');
            } catch (error) {
              console.error('Error:', error.message);
              process.exit(1);
            }
          }

          main();
          EOFSCRIPT

          # Run the Node.js script
          node fetch-posts.js
      - name: Check if blog-posts.txt exists
        id: check_blog
        run: |
              if [ -f "blog-posts.txt" ]; then
                echo "exists=true" >> $GITHUB_OUTPUT
              else
                echo "exists=false" >> $GITHUB_OUTPUT
              fi

      - name: Create update-readme.js
        if: steps.check_blog.outputs.exists == 'true'
        run: |
          # Create a Node.js script to update the README
          cat > update-readme.js << 'EOFSCRIPT'
          const fs = require('fs');

          // Read the blog posts
          let blogPosts = fs.readFileSync('blog-posts.txt', 'utf8');

          // If no blog posts were found, add a placeholder
          if (!blogPosts.trim()) {
            blogPosts = '- No blog posts found. Check back later!';
          }

          // Read the README
          const readme = fs.readFileSync('README.md', 'utf8');

          // Define the markers
          const startMarker = '<!-- BLOG-POST-LIST:START -->';
          const endMarker = '<!-- BLOG-POST-LIST:END -->';

          // Find the start and end positions
          const startPos = readme.indexOf(startMarker);
          const endPos = readme.indexOf(endMarker, startPos);

          if (startPos === -1 || endPos === -1) {
            console.log('Markers not found in README.md');
            process.exit(1);
          }

          // Construct the new README content
          const newReadme = 
            readme.substring(0, startPos) + 
            startMarker + '\n' + 
            blogPosts + '\n' + 
            readme.substring(endPos);

          // Check if there are any changes
          if (readme === newReadme) {
            console.log('No changes needed to README.md');
            process.exit(0);
          }

          // Write the updated README
          fs.writeFileSync('README.md', newReadme);
          console.log('README.md updated successfully');
          EOFSCRIPT

          # Run the update script
          node update-readme.js

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "No changes to README.md, skipping commit"
          else
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "Update latest blog posts"
            git push
          fi
