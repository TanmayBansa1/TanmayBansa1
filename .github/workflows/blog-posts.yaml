name: Latest blog posts from Hashnode
"on":
  schedule:
    - cron: 0 * * * *
  workflow_dispatch: null
jobs:
  update-readme:
    name: Update README with latest blog posts
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Create blog posts file
        env:
          HASHNODE_PAT: "${{ secrets.PAT }}"
        run: |
          echo "Fetching blog posts using Hashnode GraphQL API..."

          # Create a file to fetch posts using GraphQL
          cat > fetch-posts.js << 'EOFSCRIPT'
          const https = require('https');
          const fs = require('fs');

          const query = `
            {
              publication(id: "${process.env.HASHNODE_PAT}") {
                id
                posts(first: 5) {
                  edges {
                    node {
                      id
                      title
                      brief
                      slug
                      publishedAt
                      coverImage {
                        url
                      }
                    }
                  }
                }
              }
            }
          `;

          const options = {
            hostname: 'gql.hashnode.com',
            path: '/',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            }
          };

          // Function to try fetching with retries
          function fetchWithRetry(data, retries = 3, delay = 3000) {
            return new Promise((resolve, reject) => {
              console.log(`Attempt to fetch posts, retries left: ${retries}`);
              
              const req = https.request(options, (res) => {
                console.log(`Status code: ${res.statusCode}`);
                
                if (res.statusCode === 429 && retries > 0) {
                  console.log(`Rate limited. Retrying after ${delay}ms...`);
                  setTimeout(() => {
                    fetchWithRetry(data, retries - 1, delay * 1.5)
                      .then(resolve)
                      .catch(reject);
                  }, delay);
                  return;
                }
                
                if (res.statusCode !== 200) {
                  return reject(new Error(`Status code: ${res.statusCode}`));
                }
                
                const chunks = [];
                res.on('data', chunk => chunks.push(chunk));
                res.on('end', () => {
                  const responseData = Buffer.concat(chunks).toString('utf-8');
                  resolve(responseData);
                });
              });
              
              req.on('error', err => {
                console.error(`Error fetching: ${err.message}`);
                if (retries > 0) {
                  console.log(`Retrying after ${delay}ms...`);
                  setTimeout(() => {
                    fetchWithRetry(data, retries - 1, delay * 1.5)
                      .then(resolve)
                      .catch(reject);
                  }, delay);
                } else {
                  reject(err);
                }
              });
              
              const requestBody = {
                query: query
              };
              
              req.write(JSON.stringify(requestBody));
              req.end();
            });
          }

          async function main() {
            try {
              console.log('Fetching posts from Hashnode...');
              const response = await fetchWithRetry();
              const data = JSON.parse(response);
              
              if (!data.data?.publication?.posts?.edges) {
                console.log('No posts found in the response.');
                return;
              }
              
              const posts = data.data.publication.posts.edges.map(edge => edge.node);
              console.log(`Found ${posts.length} posts.`);
              
              // Format posts for README
              const formattedPosts = posts.map(post => 
                `- [${post.title}](https://tanmaybansal.hashnode.dev/${post.slug})`
              ).join('\n');
              
              // Write to a file
              fs.writeFileSync('blog-posts.txt', formattedPosts);
              console.log('Blog posts written to blog-posts.txt');
            } catch (error) {
              console.error('Error:', error.message);
              process.exit(1);
            }
          }

          main();
          EOFSCRIPT

          # Run the Node.js script
          node fetch-posts.js
      - name: Check if blog-posts.txt exists
        id: check_blog
        run: |
              if [ -f "blog-posts.txt" ]; then
                echo "exists=true" >> $GITHUB_OUTPUT
              else
                echo "exists=false" >> $GITHUB_OUTPUT
              fi

      - name: Create update-readme.js
        if: steps.check_blog.outputs.exists == 'true'
        run: |
          # Create a Node.js script to update the README
          cat > update-readme.js << 'EOFSCRIPT'
          const fs = require('fs');

          // Read the blog posts
          let blogPosts = fs.readFileSync('blog-posts.txt', 'utf8');

          // If no blog posts were found, add a placeholder
          if (!blogPosts.trim()) {
            blogPosts = '- No blog posts found. Check back later!';
          }

          // Read the README
          const readme = fs.readFileSync('README.md', 'utf8');

          // Define the markers
          const startMarker = '<!-- BLOG-POST-LIST:START -->';
          const endMarker = '<!-- BLOG-POST-LIST:END -->';

          // Find the start and end positions
          const startPos = readme.indexOf(startMarker);
          const endPos = readme.indexOf(endMarker, startPos);

          if (startPos === -1 || endPos === -1) {
            console.log('Markers not found in README.md');
            process.exit(1);
          }

          // Construct the new README content
          const newReadme = 
            readme.substring(0, startPos) + 
            startMarker + '\n' + 
            blogPosts + '\n' + 
            readme.substring(endPos);

          // Check if there are any changes
          if (readme === newReadme) {
            console.log('No changes needed to README.md');
            process.exit(0);
          }

          // Write the updated README
          fs.writeFileSync('README.md', newReadme);
          console.log('README.md updated successfully');
          EOFSCRIPT

          # Run the update script
          node update-readme.js

          # Check if there are changes
          if git diff --quiet README.md; then
            echo "No changes to README.md, skipping commit"
          else
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "Update latest blog posts"
            git push
          fi
